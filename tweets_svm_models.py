# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JbP9O3CNvSoCpCpbKlaBc3vU3MAIjooF
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing necessary libraries

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from scipy.sparse import hstack
from sklearn import svm
from sklearn import datasets
from sklearn import metrics
# %matplotlib inline

# Concatenating both csv files into one dataframe 

vaita_data = pd.read_csv('vaita_tweets.csv')
vasileia_data = pd.read_csv('vasileia_tweets.csv')

all_csv = [vaita_data, vasileia_data]
tweet_df = pd.concat(all_csv)

# Correcting sent_vaccication column to 'sent_vaccination'

tweet_df = tweet_df.rename(columns={'sent_vaccication': 'sent_vaccination'})

# Tweet_df.head()

tweet_df.describe()

print(tweet_df.columns[3])

tweet_df['sent_vaccination'].value_counts().plot(kind='pie', autopct='%1.0f%%',figsize=(8, 8))

tweet_df['sent_astrazeneca'].value_counts().plot(kind='pie', autopct='%1.0f%%',figsize=(8, 8))

tweet_df['sent_pfizer'].value_counts().plot(kind='pie', autopct='%1.0f%%',figsize=(8, 8))

tweet_df['sent_other'].value_counts().plot(kind='pie', autopct='%1.0f%%',figsize=(8, 8))

# Modifying sentiment words with integer numbers

tweet_df['sent_vaccination'] = tweet_df['sent_vaccination'].replace(['Not Mentioned','Positive','Neutral', 'Negative'],[0, 1, 2, 3])
tweet_df['sent_astrazeneca'] = tweet_df['sent_astrazeneca'].replace(['Not Mentioned','Positive','Neutral', 'Negative'],[0, 1, 2, 3])
tweet_df['sent_pfizer'] = tweet_df['sent_pfizer'].replace(['Not Mentioned','Positive','Neutral', 'Negative'],[0, 1, 2, 3])
tweet_df['sent_other'] = tweet_df['sent_other'].replace(['Not Mentioned','Positive','Neutral', 'Negative'],[0, 1, 2, 3])

tweets_df = tweet_df.dropna()

tweets_df.shape

# Using TfidVectorizer; in word level; it creates the TF-IDF vectors for data, thus the data can be used by the LOG REGR model


train_text = tweets_df['text']

word_vectorizer = TfidfVectorizer(
    sublinear_tf=True,
    strip_accents='unicode',
    analyzer='word',
    token_pattern=r'\w{1,}',
    ngram_range=(1, 1), # using one token
    max_features=10000)
# fitting
word_vectorizer.fit(train_text)
# it gives the vectors to be used
train_word_features = word_vectorizer.transform(train_text)

# Tf-Idf for n-grams; in character level
char_vectorizer = TfidfVectorizer(
    sublinear_tf=True,
    strip_accents='unicode',
    analyzer='char',
    ngram_range=(2, 6), # from 2 to 6 n-grams
    max_features=50000)
char_vectorizer.fit(train_text)
train_char_features = char_vectorizer.transform(train_text)

# Everything we have transformed will be used for training
# Putting them in a horizontal order (hstack)

train_features = hstack([train_char_features,train_word_features])

# Dropping redundant columns

tweets_df.drop(['aspect_mention', 'id'], axis = 1, inplace = True)
tweets_df.head()

# Y data 

labels = tweets_df[['sent_vaccination','sent_astrazeneca', 'sent_pfizer','sent_other']]
labels.head()

# Splitting train and test data

X_train, X_test, y_train, y_test = train_test_split(train_features, labels, test_size = 0.20, random_state = 100)

# Instantiate the Support Vector Classifier (SVC) for  'sent_vaccination'
svc_vacc = svm.SVC(decision_function_shape='ovo')
 
# Fit the model

svc_vacc.fit(X_train, y_train['sent_vaccination'])

print(f"Train score is: {svc_vacc.score(X_train, y_train['sent_vaccination'])}")
print(f"Test score is: {svc_vacc.score(X_test, y_test['sent_vaccination'])}")

# Instantiate the Support Vector Classifier (SVC) for 'sent_astrazeneca'
svc_astra = svm.SVC(decision_function_shape='ovo')
 
# Fit the model
svc_astra.fit(X_train, y_train['sent_astrazeneca'])

print(f"Train score is: {svc_astra.score(X_train, y_train['sent_astrazeneca'])}")
print(f"Test score is: {svc_astra.score(X_test, y_test['sent_astrazeneca'])}")

# Instantiate the Support Vector Classifier (SVC) for 'sent_pfizer' 
svc_pfizer = svm.SVC(decision_function_shape='ovo')
 
# Fit the model
svc_pfizer.fit(X_train, y_train['sent_pfizer'])

print(f"Train score is: {svc_pfizer.score(X_train, y_train['sent_pfizer'])}")
print(f"Test score is: {svc_pfizer.score(X_test, y_test['sent_pfizer'])}")

# Instantiate the Support Vector Classifier (SVC) for 'sent_other'
svc_other = svm.SVC(decision_function_shape='ovo')
 
# Fit the model
svc_other.fit(X_train, y_train['sent_other'])

print(f"Train score is: {svc_other.score(X_train, y_train['sent_other'])}")
print(f"Test score is: {svc_other.score(X_test, y_test['sent_other'])}")